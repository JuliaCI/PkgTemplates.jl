name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          <<#VERSIONS>>
          - '<<&.>>'
          <</VERSIONS>>
        os:
          <<#OS>>
          - <<&.>>
          <</OS>>
        arch:
          <<#ARCH>>
          - <<&.>>
          <</ARCH>>
        <<#HAS_EXCLUDES>>
        exclude:
        <</HAS_EXCLUDES>>
        <<#EXCLUDES>>
          - os: <<&E_OS>>
            arch: <<&E_ARCH>>
            <<#E_VERSION>>
            version: '<<&E_VERSION>>'
            <</E_VERSION>>
        <</EXCLUDES>>
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      <<#HAS_CODECOV>>
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info
      <</HAS_CODECOV>>
      <<#HAS_COVERALLS>>
      - uses: julia-actions/julia-uploadcoveralls@v1
        env:
          COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
      <</HAS_COVERALLS>>
  <<#HAS_DOCUMENTER>>
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - run: |
          julia --project=docs -e '
            using Pkg
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()'
      - run: |
          julia --project=docs -e '
            using Documenter: DocMeta, doctest
            using <<&PKG>>
            DocMeta.setdocmeta!(<<&PKG>>, :DocTestSetup, :(using <<&PKG>>); recursive=true)
            doctest(<<&PKG>>)'
      - run: julia --project=docs docs/make.jl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
  <</HAS_DOCUMENTER>>
